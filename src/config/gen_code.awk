# Copyright (c) 1998 Lawrence Livermore National Security, LLC and other
# HYPRE Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (Apache-2.0 OR MIT)

#################################################################################
#
# Generate code for multiprecision _pre functions
#
# The script parses a prototype info file (generated by 'gen_proto_info.sh') and
# generates files 'outc' and 'outh' containing function implementations and
# prototypes for each line of prototype info.
#
# Usage:   <this-script> <proto-info> <prefix>
# Example: <this-script> mup.pre.ext.proto mup_pre_ext
#
#################################################################################

BEGIN {
   FS=" , "
}

{
   fret  = $1
   fdef  = $2
   tab   = "   "

   nargs = ParseArgs()

   if (gen == "fixed")
   {
      GenFixed()
   }
   else if (gen == "functions")
   {
      GenFunctions()
   }
   else if (gen == "pre")
   {
      GenPre()
   }
}

#################################################################################
#
# Append code for fixed precision functions to files 'outc' and 'outh'.
#
#################################################################################

function GenFixed()
{
   if (nargs == 0)
   {
      # This is a special case Foo(void) function
      p_str = " void "
      s_str = " "
   }

   arg_flt      = sprintf("%s", p_str)
   arg_dbl      = sprintf("%s", p_str)
   arg_long_dbl = sprintf("%s", p_str)
   arg_mup      = sprintf("%s", p_str)

   gsub(/(HYPRE_Real|HYPRE_Complex)/, "hypre_float", arg_flt)
   gsub(/(HYPRE_Real|HYPRE_Complex)/, "hypre_double", arg_dbl)
   gsub(/(HYPRE_Real|HYPRE_Complex)/, "hypre_long_double", arg_long_dbl)

   print fret"\n"fdef"_flt("arg_flt");"             >> outh
   print fret"\n"fdef"_dbl("arg_dbl");"             >> outh
   print fret"\n"fdef"_long_dbl("arg_long_dbl");\n" >> outh

   # Put fixed implementation code here if needed
   print "/*--------------------------------------------------------------------------*/\n" >> outc
   print fret"\n"fdef"("arg_mup")"                                                          >> outc
   print "{"                                                                                >> outc
   print tab "return HYPRE_CURRENTPRECISION_FUNC("fdef")("s_str");"                         >> outc
   print "}\n"                                                                              >> outc
}

#################################################################################
#
# Append code for multiprecision functions to files 'outc' and 'outh'.
#
#################################################################################

function GenFunctions()
{
   if (nargs == 0)
   {
      # This is a special case Foo(void) function
      p_str = " void "
      s_str = " precision "
   }
   else
   {
      s_str = sprintf(" precision,%s", s_str)
   }

   arg_flt      = sprintf("%s", p_str)
   arg_dbl      = sprintf("%s", p_str)
   arg_long_dbl = sprintf("%s", p_str)
   arg_mup      = sprintf("%s", p_str)

   gsub(/(HYPRE_Real|HYPRE_Complex)/, "hypre_float", arg_flt)
   gsub(/(HYPRE_Real|HYPRE_Complex)/, "hypre_double", arg_dbl)
   gsub(/(HYPRE_Real|HYPRE_Complex)/, "hypre_long_double", arg_long_dbl)

   # First replace HYPRE_Real* and HYPRE_Complex* with void*
   gsub(/(HYPRE_Real|HYPRE_Complex)[[:blank:]]*[*]+/, "void *", arg_mup)
   gsub(/(HYPRE_Real|HYPRE_Complex)/, "hypre_long_double", arg_mup)

   print fret"\n"fdef"_flt("arg_flt");"           >> outh
   print fret"\n"fdef"_dbl("arg_dbl");"           >> outh
   print fret"\n"fdef"_long_dbl("arg_long_dbl");" >> outh
   print fret"\n"fdef"("arg_mup");\n"             >> outh

   print "/*--------------------------------------------------------------------------*/\n" >> outc
   print fret"\n"fdef"("arg_mup")"                                                          >> outc
   print "{"                                                                                >> outc
   print tab "HYPRE_Precision precision = hypre_GlobalPrecision();"                         >> outc
   print tab "return "fdef"_pre("s_str");"                                                  >> outc
   print "}\n"                                                                              >> outc
}

#################################################################################
#
# Append code for multiprecision '_pre' functions to files 'outc' and 'outh'.
#
#################################################################################

function GenPre()
{
   if (nargs == 0)
   {
      # This is a special case Foo(void) function
      p_str = " void "
      s_str = " "
      arg_pre = " HYPRE_Precision precision "
   }
   else
   {
      arg_pre = sprintf(" HYPRE_Precision precision,%s", p_str)
   }

   # First replace HYPRE_Real* and HYPRE_Complex* with void*
   gsub(/(HYPRE_Real|HYPRE_Complex)[[:blank:]]*[*]+/, "void *", arg_pre)
   gsub(/(HYPRE_Real|HYPRE_Complex)/, "hypre_long_double", arg_pre)

   print fret"\n"fdef"_pre("arg_pre");\n"         >> outh

   print "/*--------------------------------------------------------------------------*/\n" >> outc
   print fret"\n"fdef"_pre("arg_pre")"                                                      >> outc
   print "{"                                                                                >> outc
   print tab "switch (precision)"                                                           >> outc
   print tab "{"                                                                            >> outc
   print tab tab "case HYPRE_REAL_SINGLE:"                                                  >> outc
   print tab tab tab "return "fdef"_flt("s_str");"                                          >> outc
   print tab tab "case HYPRE_REAL_DOUBLE:"                                                  >> outc
   print tab tab tab "return "fdef"_dbl("s_str");"                                          >> outc
   print tab tab "case HYPRE_REAL_LONGDOUBLE:"                                              >> outc
   print tab tab tab "return "fdef"_long_dbl("s_str");"                                     >> outc
   print tab tab "default:" >> outc
   if(fret == "void")
   {
      print tab tab tab "hypre_error_w_msg(HYPRE_ERROR_GENERIC, \"Unknown solver precision\");" >> outc
   }
   else
   {
      print tab tab tab "{ "fret" value = 0; hypre_error_w_msg(HYPRE_ERROR_GENERIC, \"Unknown solver precision\"); return value; }" >> outc
   }
   print tab "}"                                                                            >> outc
   print "}\n"                                                                              >> outc
}

#################################################################################
#
# Parse a prototype info file line (see 'gen_proto_info.sh') and create global
# strings 'p_str' and 's_str' containing arguments for a function prototype and
# function call, respectively.
#
#################################################################################

function ParseArgs(          i, argall, argvar, laststart, lastlength)
{
   p_str = ""
   s_str = ""
   for(i = 3; i <= NF; i++)
   {
      argall = sprintf("%s", $i)
      # Find the last legal C token in the argument (should not start with numbers)
      # This helps to address arguments like const double foo[3]
      laststart  = 1;
      lastlength = 0;
      while ( match(substr($i, laststart + lastlength), /[a-zA-Z_][a-zA-Z0-9_]*/) )
      {
         laststart  = laststart + lastlength + RSTART - 1
         lastlength = RLENGTH
      }
      argvar = substr($i, laststart, lastlength)
      # Remove leading and trailing spaces
      sub(/^[[:blank:]]*/, "", argall); sub(/[[:blank:]]*$/, "", argall)
      sub(/^[[:blank:]]*/, "", argvar); sub(/[[:blank:]]*$/, "", argvar)
      # Append, then add a comma if not the last argument
      p_str = sprintf("%s %s", p_str, argall)
      s_str = sprintf("%s %s", s_str, argvar)
      if(i < NF)
      {
         p_str = sprintf("%s,", p_str)
         s_str = sprintf("%s,", s_str)
      }
   }
   p_str = sprintf("%s ", p_str)
   s_str = sprintf("%s ", s_str)

   return (NF-2)
}
